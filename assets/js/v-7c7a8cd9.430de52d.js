"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[721],{789:(s,n,a)=>{a.r(n),a.d(n,{data:()=>e});const e={key:"v-7c7a8cd9",path:"/guide/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE.html",title:"1.基础业务库访问地址",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:3,title:"1.    安装mysql",slug:"_1-安装mysql",children:[]},{level:3,title:"2.安装elasticsearch",slug:"_2-安装elasticsearch",children:[]},{level:3,title:"3.安装postgres",slug:"_3-安装postgres",children:[]},{level:3,title:"4.安装redis",slug:"_4-安装redis",children:[]},{level:3,title:"5.安装 minio",slug:"_5-安装-minio",children:[]},{level:3,title:"7.安装nacos",slug:"_7-安装nacos",children:[]},{level:3,title:"8. 安装zlmediakit 一个流媒体框架",slug:"_8-安装zlmediakit-一个流媒体框架",children:[]},{level:3,title:"9.安装docker镜像仓库",slug:"_9-安装docker镜像仓库",children:[]},{level:3,title:"10.安装kibana",slug:"_10-安装kibana",children:[]}],filePathRelative:"guide/开发环境配置.md",git:{updatedTime:1636707228e3,contributors:[{name:"Colatis",email:"55677664+Colatis@users.noreply.github.com",commits:1}]}}},941:(s,n,a)=>{a.r(n),a.d(n,{default:()=>f});var e=a(252);const p=(0,e.uE)('<h1 id="_1-基础业务库访问地址" tabindex="-1"><a class="header-anchor" href="#_1-基础业务库访问地址" aria-hidden="true">#</a> 1.基础业务库访问地址</h1><p>**mysql **</p><p><code>192.168.8.212 root 123456</code></p><p><strong>elasticsearch</strong></p><p><code>192.168.8.212 9200 </code></p><p><strong>postgres</strong></p><p><code>192.168.8.212 5432 postges 123456 </code></p><p><strong>redis</strong></p><p><code>192.168.8.212 6379 123456</code></p><p><strong>minio</strong></p><p><code>192.168.8.212 9000 admin admin123456</code></p><p><strong>nacos</strong></p>',12),r={href:"http://192.168.8.212:8848/nacos/",target:"_blank",rel:"noopener noreferrer"},t=(0,e._)("strong",null,"http://192.168.8.212:8848/nacos/",-1),l=(0,e._)("p",null,"账号：nacos 密码：nacos",-1),o=(0,e._)("p",null,[(0,e._)("strong",null,"zlmediakit"),(0,e.Uk)(" 流媒体")],-1),c=(0,e._)("p",null,"192.168.212:8090",-1),i=(0,e._)("p",null,"**docker **私服",-1),d={href:"http://192.168.8.212:5000/v2/_catalog",target:"_blank",rel:"noopener noreferrer"},u=(0,e.Uk)("_"),m=(0,e._)("em",null,[(0,e.Uk)("http://192.168.8.212:5000/v2/"),(0,e._)("em",null,"catalog")],-1),b=(0,e.uE)('<p>jenkins自动化部署构建（项目测试环境）</p><p>http://192.168.8.223:8899/ ，管理员账号密码：admin / admin</p><h1 id="_2-docker-安装教程" tabindex="-1"><a class="header-anchor" href="#_2-docker-安装教程" aria-hidden="true">#</a> 2.docker 安装教程</h1><h3 id="_1-安装mysql" tabindex="-1"><a class="header-anchor" href="#_1-安装mysql" aria-hidden="true">#</a> 1. 安装mysql</h3><p><code>docker search mysql</code></p><p><code>docker pull mysql:latest</code></p><p><code>docker images</code></p><p><code>docker run -itd--name mysql-5.7.5 -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql:5.7.5 --lower_case_table_names=1</code></p><p><code>docker ps</code> // 查看运行的镜像</p><p><code>docker exec -it mysql-5.7.5 bash</code> // 进入mysql 的环境</p><h3 id="_2-安装elasticsearch" tabindex="-1"><a class="header-anchor" href="#_2-安装elasticsearch" aria-hidden="true">#</a> 2.安装elasticsearch</h3><p>docker pull elasticsearch:7.6.0</p><p>创建挂载目录</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>mkdir -p /mydata/elasticsearch/config\nmkdir -p /mydata/elasticsearch/data\necho &quot;http.host: 0.0.0.0&quot; &gt;&gt; /mydata/elasticsearch/config/elasticsearch.yml\nchmod -R 777 /mydata/elasticsearch/config\nchmod -R 777 /mydata/elasticsearch/data\nchmod -R 777 /mydata/elasticsearch/elasticsearch.yml\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>docker run -d --restart=always -d -e ES_JAVA_POTS=&quot;-Xms256m -Xmx256m&quot;  -e &quot;discovery.type=single-node&quot; -v /mydata/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml -v /mydata/elasticsearch/data:/usr/share/elasticsearch/data -v /mydata/elasticsearch/plugins:/usr/share/elasticsearch/plugins -p 9200:9200 -p 9300:9300 --name es7.6.0 elasticsearch:7.6.0\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="_3-安装postgres" tabindex="-1"><a class="header-anchor" href="#_3-安装postgres" aria-hidden="true">#</a> 3.安装<strong>postgres</strong></h3><p>创建数据挂载目录</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>mkdir -p  /mydata/postgres\nchmod -R 777 /mydata/postgres\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>docker run --name postgres -d --restart=always -e POSTGRES_PASSWORD=123456 -p 5432:5432 -d -v /mydata/postgres:/var/lib/postgresql/data postgres:latest\n#挂载有问题\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 进入postgres</span>\ndocker <span class="token builtin class-name">exec</span> -it postgres /bin/bash <span class="token comment"># 或者 sh</span>\n<span class="token comment"># 进入根目录</span>\n<span class="token builtin class-name">cd</span> /usr/lib/postgresql/<span class="token punctuation">[</span>version<span class="token punctuation">]</span>/bin\n<span class="token comment"># 连接数据库</span>\npsql -Upostgres\n<span class="token comment"># 查看数据库</span>\n<span class="token punctuation">\\</span>l\n<span class="token comment"># 切换数据库</span>\n<span class="token punctuation">\\</span>d smartlinks\n<span class="token comment"># 设置时区</span>\n<span class="token builtin class-name">set</span> <span class="token function">time</span> zone <span class="token string">&quot;PRC&quot;</span>\n<span class="token comment"># 查看时区</span>\n<span class="token keyword">select</span> now<span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="_4-安装redis" tabindex="-1"><a class="header-anchor" href="#_4-安装redis" aria-hidden="true">#</a> 4.安装redis</h3><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>docker pull redis\ndocker run --name redis -p 6379:6379 -d --restart=always redis:latest redis-server --appendonly yes --requirepass &quot;123456&quot;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_5-安装-minio" tabindex="-1"><a class="header-anchor" href="#_5-安装-minio" aria-hidden="true">#</a> 5.安装 minio</h3><p>mkdir -p /mydata/minio/data</p><p>mkdir -p /mydata/minio/config</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>       docker run -itd -p 9000:9000 --name minio   -e&quot;MINIO_ACCESS_KEY=admin&quot;   -e&quot;MINIO_SECRET_KEY=123456&quot;   -v /mydata/minio/data:/data   -v /mydata/minio/config:/root/.minio   minio/minio server /data\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code>docker run <span class="token operator">-</span>p <span class="token number">9000</span><span class="token operator">:</span><span class="token number">9000</span> <span class="token operator">--</span>name minio \\\n<span class="token operator">-</span>d <span class="token operator">--</span>restart<span class="token operator">=</span>always \\\n<span class="token operator">-</span>e <span class="token string">&quot;MINIO_ACCESS_KEY=admin&quot;</span> \\\n<span class="token operator">-</span>e <span class="token string">&quot;MINIO_SECRET_KEY=admin123456&quot;</span> \\\n<span class="token operator">-</span>v <span class="token operator">/</span>mydata<span class="token operator">/</span>minio<span class="token operator">/</span><span class="token keyword">data</span><span class="token operator">:</span><span class="token operator">/</span><span class="token keyword">data</span> \\\n<span class="token operator">-</span>v <span class="token operator">/</span>mydata<span class="token operator">/</span>minio<span class="token operator">/</span>config<span class="token operator">:</span><span class="token operator">/</span>root<span class="token operator">/</span><span class="token punctuation">.</span>minio \\\nminio<span class="token operator">/</span>minio server <span class="token operator">/</span><span class="token keyword">data</span>\n挂载有问题\n新版本使用如下命令\n\ndocker run <span class="token operator">-</span>itd <span class="token operator">-</span>p <span class="token number">9000</span><span class="token operator">:</span><span class="token number">9000</span> <span class="token operator">-</span>p <span class="token number">9001</span><span class="token operator">:</span><span class="token number">9001</span> <span class="token operator">--</span>name minio   <span class="token operator">-</span>e <span class="token string">&quot;MINIO_ROOT_USER=admin&quot;</span>   <span class="token operator">-</span>e <span class="token string">&quot;MINIO_ROOT_PASSWORD=admin123456&quot;</span> <span class="token operator">-</span>v <span class="token operator">/</span>mydata<span class="token operator">/</span>minio<span class="token operator">/</span><span class="token keyword">data</span><span class="token operator">:</span><span class="token operator">/</span><span class="token keyword">data</span>   <span class="token operator">-</span>v <span class="token operator">/</span>mydata<span class="token operator">/</span>minio<span class="token operator">/</span>config<span class="token operator">:</span><span class="token operator">/</span>root<span class="token operator">/</span><span class="token punctuation">.</span>minio   minio<span class="token operator">/</span>minio server <span class="token operator">/</span><span class="token keyword">data</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token operator">..</span><span class="token punctuation">.</span><span class="token number">4</span><span class="token punctuation">}</span> <span class="token operator">--</span>console<span class="token operator">-</span>address <span class="token string">&quot;:9001&quot;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>6.安装maridb</p><p>docker run --name mariadb -p 3306:3307 -d --restart=always mariadb:latest -e MYSQL_ROOT_PASSWORD=”123456“</p><h3 id="_7-安装nacos" tabindex="-1"><a class="header-anchor" href="#_7-安装nacos" aria-hidden="true">#</a> 7.安装nacos</h3><p>创建日志和配置文件的挂载目录</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">mkdir</span> -p /mydata/nacos/logs/                      <span class="token comment">#新建logs目录</span>\n<span class="token function">mkdir</span> -p /mydata/nacos/init.d/          \n<span class="token function">cat</span> <span class="token operator">&gt;&gt;</span> /mydata/nacos/init.d/custom.properties <span class="token operator">&lt;&lt;</span> <span class="token string">EOF\nserver.contextPath=/nacos\nserver.servlet.contextPath=/nacos\nserver.port=8848\nspring.datasource.platform=mysql\ndb.num=1\ndb.url.0=jdbc:mysql://192.168.8.212:3306/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true\ndb.user=root\ndb.password=123456\nnacos.cmdb.dumpTaskInterval=3600\nnacos.cmdb.eventTaskInterval=10\nnacos.cmdb.labelTaskInterval=300\nnacos.cmdb.loadDataAtStart=false\nmanagement.metrics.export.elastic.enabled=false\nmanagement.metrics.export.influx.enabled=false\nserver.tomcat.accesslog.enabled=true\nserver.tomcat.accesslog.pattern=%h %l %u %t &quot;%r&quot; %s %b %D %{User-Agent}i\nnacos.security.ignore.urls=/,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-fe/public/**,/v1/auth/login,/v1/console/health/**,/v1/cs/**,/v1/ns/**,/v1/cmdb/**,/actuator/**,/v1/console/server/**\nnacos.naming.distro.taskDispatchThreadCount=1\nnacos.naming.distro.taskDispatchPeriod=200\nnacos.naming.distro.batchSyncKeyCount=1000\nnacos.naming.distro.initDataRatio=0.9\nnacos.naming.distro.syncRetryDelay=5000\nnacos.naming.data.warmup=true\nnacos.naming.expireInstance=true\nEOF</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><p>安装和执行</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>docker run <span class="token punctuation">\\</span>\n--name nacos -d <span class="token punctuation">\\</span>\n-p <span class="token number">8848</span>:8848 <span class="token punctuation">\\</span>\n--privileged<span class="token operator">=</span>true <span class="token punctuation">\\</span>\n--restart<span class="token operator">=</span>always <span class="token punctuation">\\</span>\n-e <span class="token assign-left variable">JVM_XMS</span><span class="token operator">=</span>256m <span class="token punctuation">\\</span>\n-e <span class="token assign-left variable">JVM_XMX</span><span class="token operator">=</span>256m <span class="token punctuation">\\</span>\n-e <span class="token assign-left variable">MODE</span><span class="token operator">=</span>standalone <span class="token punctuation">\\</span>\n-e <span class="token assign-left variable">PREFER_HOST_MODE</span><span class="token operator">=</span>hostname <span class="token punctuation">\\</span>\n-v /mydata/nacos/logs:/home/nacos/logs <span class="token punctuation">\\</span>\n-v /mydata/nacos/init.d/custom.properties:/home/nacos/init.d/custom.properties <span class="token punctuation">\\</span>\nnacos/nacos-server:2.0.1\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>访问nacos 前端</p>',35),k={href:"http://127.0.0.1:8848/nacos/",target:"_blank",rel:"noopener noreferrer"},g=(0,e._)("strong",null,"http://127.0.0.1:8848/nacos/",-1),h=(0,e.uE)('<p>账号：nacos 密码：nacos</p><h3 id="_8-安装zlmediakit-一个流媒体框架" tabindex="-1"><a class="header-anchor" href="#_8-安装zlmediakit-一个流媒体框架" aria-hidden="true">#</a> 8. 安装zlmediakit 一个流媒体框架</h3><p>安装并运行</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>docker run -p <span class="token number">1935</span>:1935 -p <span class="token number">8090</span>:80 -p <span class="token number">8554</span>:554 -p <span class="token number">10000</span>:10000 -p <span class="token number">10000</span>:10000/udp -d --name zlmediakit --restart<span class="token operator">=</span>always panjjo/zlmediakit\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="_8-1-不使用docker安装zlmediakit" tabindex="-1"><a class="header-anchor" href="#_8-1-不使用docker安装zlmediakit" aria-hidden="true">#</a> 8.1 不使用docker安装zlmediakit</h4><p>#国内用户推荐从同步镜像网站gitee下载</p><p>git clone --depth 1 https://gitee.com/xia-chu/ZLMediaKit</p><p>cd ZLMediaKit</p><p>#千万不要忘记执行这句命令</p><p>git submodule update --init</p><p>安装C</p><p>sudo yum -y install gcc</p><p>sudo yum -y install gcc-c++</p><p>安装cmake， 由于yum版本太低，所以直接下载包</p><p>wget https://cmake.org/files/v3.12/cmake-3.12.2-Linux-x86_64.tar.gz</p><p>tar zxvf cmake-3.12.2-Linux-x86_64.tar.gz</p><p>设置环境变量</p><p>vim /etc/profile</p><p>文件最后加上</p><p>export CMAKE_HOME=/root/cmake-3.12.2-Linux-x86_64/bin</p><p>export PATH=$CMAKE_HOME:$PATH</p><p>路径不同需要根据自己情况修改</p><p>保存变量</p><p>source /etc/profile</p><p>检查是否安装成功</p><p>cmake -version</p><p>编译</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> ZLMediaKit\n<span class="token function">mkdir</span> build\n<span class="token builtin class-name">cd</span> build\n<span class="token comment">#macOS下可能需要这样指定openss路径：cmake .. -DOPENSSL_ROOT_DIR=/usr/local/Cellar/openssl/1.0.2j/</span>\ncmake <span class="token punctuation">..</span>\n<span class="token function">make</span> -j4\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>修改配置文件 vim /root/ZLMediaKit/release/linux/Debug/config.ini</p><p>一般来说只改http.port 改为 8090</p><p>运行</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> ZLMediaKit/release/linux/Debug\n<span class="token comment">#通过-h可以了解启动参数</span>\n./MediaServer -h\n<span class="token comment">#以守护进程模式启动</span>\n./MediaServer -d <span class="token operator">&amp;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="_9-安装docker镜像仓库" tabindex="-1"><a class="header-anchor" href="#_9-安装docker镜像仓库" aria-hidden="true">#</a> 9.安装docker镜像仓库</h3><p>创建挂载路径</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>mkdir -p /var/lib/registry\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>安装并运行</p><div class="language-none ext-none line-numbers-mode"><pre class="language-none"><code>docker run -d -v /var/lib/registry:/var/lib/registry \\\n-p 5000:5000 \\\n--restart=always \\\n--name xdp-registry registry \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>首先，为了让客户端服务器能够快速地访问刚刚在服务端搭建的镜像仓库（默认情况下是需要配置HTTPS证书的），这里简单在客户端配置一下私有仓库的可信任设置让我们可以通过HTTP直接访问：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>vim /etc/docker/daemon.json\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>{ \n    &quot;insecure-registries&quot; : [ &quot;192.168.8.212:5000&quot; ] \n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>为了使得配置生效，重新启动docker服务：#</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code> systemctl restart docker\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>其次，为要上传的镜像打Tag：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>docker tag your-image-name:tagname 192.168.8.212:5000/your-image-name:tagname\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>最后，开始正式上传镜像到服务端镜像仓库</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>docker push your-image-name:tagname 192.168.8.212:5000/your-image-name:tagname\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>查看仓库</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>curl http://192.168.8.212:5000/v2/_catalog\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>查看某个镜像的版本</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>curl http://192.168.8.212:5000/v2/your-image-name/tags/list\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>参考文档：</p>',51),v={href:"https://www.cnblogs.com/edisonchou/p/docker_registry_repository_setup_introduction.html",target:"_blank",rel:"noopener noreferrer"},_=(0,e._)("strong",null,"https://www.cnblogs.com/edisonchou/p/docker_registry_repository_setup_introduction.html",-1),x=(0,e.uE)('<h3 id="_10-安装kibana" tabindex="-1"><a class="header-anchor" href="#_10-安装kibana" aria-hidden="true">#</a> 10.安装kibana</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>docker pull kibana:7.6.2\ndocker run -d --name kibana -p <span class="token number">5601</span>:5601 -e <span class="token string">&quot;ELASTICSEARCH_HOSTS=http://192.168.8.57:9200&quot;</span>   kibana:7.6.2\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',2),y={},f=(0,a(744).Z)(y,[["render",function(s,n){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[p,(0,e._)("p",null,[(0,e._)("a",r,[t,(0,e.Wm)(a)])]),l,o,c,i,(0,e._)("p",null,[(0,e._)("a",d,[u,m,(0,e.Wm)(a)])]),b,(0,e._)("p",null,[(0,e._)("a",k,[g,(0,e.Wm)(a)])]),h,(0,e._)("p",null,[(0,e._)("a",v,[_,(0,e.Wm)(a)])]),x],64)}]])},744:(s,n)=>{n.Z=(s,n)=>{const a=s.__vccOpts||s;for(const[s,e]of n)a[s]=e;return a}}}]);